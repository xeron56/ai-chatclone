import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:ai_chatclone/core/utils/pref_utils.dart';
import 'package:ai_chatclone/core/utils/size_utils.dart';
import 'package:get/get.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    PrefUtils().setThemeData(_newTheme);
    Get.forceAppUpdate();
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generatorif (!_supportedCustomColor.containsKey(_appTheme)){  throw Exception(               "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");      } //return theme from map
    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator if (!_supportedColorScheme.containsKey(_appTheme)){   throw Exception(                "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");       }  //return theme from map
    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onPrimary,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(32),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.blueGray800,
            width: 2,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.blueGray300,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyMedium: TextStyle(
          color: colorScheme.onErrorContainer.withOpacity(0.64),
          fontSize: 14.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: colorScheme.onErrorContainer.withOpacity(1),
          fontSize: 12.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        displayLarge: TextStyle(
          color: colorScheme.onErrorContainer.withOpacity(1),
          fontSize: 64.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w700,
        ),
        displaySmall: TextStyle(
          color: colorScheme.onErrorContainer,
          fontSize: 36.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
        headlineSmall: TextStyle(
          color: colorScheme.onErrorContainer.withOpacity(1),
          fontSize: 24.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        labelLarge: TextStyle(
          color: appTheme.blueGray300,
          fontSize: 12.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: colorScheme.onErrorContainer.withOpacity(1),
          fontSize: 20.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        titleMedium: TextStyle(
          color: appTheme.blueGray300,
          fontSize: 16.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        titleSmall: TextStyle(
          color: colorScheme.onErrorContainer.withOpacity(1),
          fontSize: 14.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF324EFF),
    primaryContainer: Color(0XFF10161B),
    secondaryContainer: Color(0XFF324FFF),

    // Error colors
    errorContainer: Color(0XFF364156),
    onErrorContainer: Color(0X87FFFFFF),

    // On colors(text colors)
    onPrimary: Color(0XFF0A0D14),
    onPrimaryContainer: Color(0XFF6E80EF),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Blue
  Color get blue200 => Color(0XFFAAB5FF);
  Color get blue90011 => Color(0X111B4FA4);
  Color get blueA200 => Color(0XFF4285F4);

  // BlueGray
  Color get blueGray100 => Color(0XFFD9D9D9);
  Color get blueGray10001 => Color(0XFFCBCCCC);
  Color get blueGray300 => Color(0XFF959DAE);
  Color get blueGray30001 => Color(0XFFA3AAB7);
  Color get blueGray700 => Color(0XFF424D62);
  Color get blueGray800 => Color(0XFF29374F);
  Color get blueGray80001 => Color(0XFF2A3850);
  Color get blueGray80002 => Color(0XFF37455D);
  Color get blueGray80054 => Color(0X54472E65);

  // Gray
  Color get gray300 => Color(0XFFE1E2E6);
  Color get gray30001 => Color(0XFFE2E3E7);
  Color get gray30002 => Color(0XFFDADADA);
  Color get gray400 => Color(0XFFBDBFC6);
  Color get gray50 => Color(0XFFF6F9FE);
  Color get gray500 => Color(0XFF97999B);
  Color get gray50001 => Color(0XFF979797);
  Color get gray600 => Color(0XFF767A8A);
  Color get gray900 => Color(0XFF11171D);
  Color get gray90001 => Color(0XFF080E24);
  Color get gray90002 => Color(0XFF101727);

  // Indigoc
  Color get indigo7000c => Color(0X0C315695);

  // Indigo
  Color get indigo900 => Color(0XFF27346A);
  Color get indigoA700 => Color(0XFF1D3AEF);
  Color get indigoA70021 => Color(0X210148FD);

  // IndigoAe
  Color get indigoA1001e => Color(0X1E819FFB);

  // LightGreen
  Color get lightGreen500 => Color(0XFF95BF46);

  // Red
  Color get redA700 => Color(0XFFE50000);

  // White
  Color get whiteA700 => Color(0XFFFDFDFE);

  // Yellow
  Color get yellow800 => Color(0XFFF79E1B);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
